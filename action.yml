name: "Build and push"
description: "Find the directories with Dockerfiles (not-recursively), build images and push them to the registry"
author: RamPrin
branding:
  icon: arrow-right
  color: purple
inputs:
  directories:
    description: "Which directories to search in. By default searches in any directory which was changed from the previous commit."
    required: false
    default: "$(git log --name-only --diff-filter=d -1 | grep '/' | cut -d '/' -f1 | sort -u)"
  registry:
    description: "Which registry to push into (ecr, cr.yandex, ghcr)"
    required: true
  registry_url:
    description: "The url of the registry (public.ecr.aws, cr.yandex, ghcr.io)"
    required: true
  registry_id:
    description: "The ID of registry ((ECR):registry-alias, (Yandex):registry-id, (ghcr):namespace)"
    required: true
  username:
    description: "String to enter into docker login --username ((ECR):ACCESS_KEY_ID, (Yandex):[iam, oauth, json_key], (ghcr):USERNAME)"
    required: true
  password:
    description: "String to enter into docker login --password ((ECR):SECRET_ACCESS_KEY, (Yandex):[<Identity and Access Management token>, <OAuth token>, key.json], (ghcr):ACCESS_TOKEN)"
    required: true
  region:
    description: "Region for AWS"
    required: false
    default: 'us-east-1'
  space_username:
    description: "Malevich-space username"
    required: true
  space_password:
    description: "Malevich-space password"
    required: true
  api_url:
    description: "URL of an API"
    required: true
  org_id:
    description: "space ci --space-org"
    required: true
  build:
    description: "Build image before report"
    required: false
    default: true

runs:
  using: composite
  steps:
      - name: Check inputs
        run: |
          keys=("REGISTRY_TYPE" "REGISTRY_URL" "REGISTRY_ID" "IMAGE_USERNAME" "IMAGE_PASSWORD" \
          "SPACE_USERNAME" "SPACE_PASSWORD" "API_URL" "ORG_ID")

          vals=("${{inputs.registry}}" "${{inputs.registry_url}}" "${{inputs.registry_id}}" \
          "${{inputs.username}}" "${{inputs.password}}" "${{inputs.space_username}}" "${{inputs.space_password}}" \
          "${{inputs.api_url}}" "${{inputs.org_id}}")

          for i in ${!vals[@]}
          do
            if [[ ${vals[i]} == "" ]];
            then
              echo "::error::${keys[i]} is NULL, exiting..."
              exit 1
            fi  
          done
        shell: 'bash'
      - name: "Install aws cli"
        if: ${{ inputs.registry == 'ecr*' }}
        uses: unfor19/install-aws-cli-action@v1
      - name: Docker Login
        run: |
          if [[ ${{ inputs.registry }} == ecr* ]];
          then
            if [[ ${{ inputs.registry }} == 'ecr-private' ]];
              then
                image_url=${{ inputs.registry_id }}.dkr.ecr.${{ inputs.region }}.amazonaws.com
              else
                image_url=${{ inputs.registry_url }}/${{ inputs.registry_id }}
            fi
            echo 'Log in via AWS CLI'
            aws configure set aws_access_key_id ${{ inputs.username }}
            aws configure set aws_secret_access_key ${{ inputs.password }}
            aws configure set region ${{ inputs.region }}
            if [[ ${{ inputs.registry }} == 'ecr-private' ]];
            then
              token=$(aws ecr get-login-password)
            else
              token=$(aws ecr-public get-login-password)
            fi
            username=AWS
          else
            echo 'Default log in'
            username=${{ inputs.username }}
            token=${{ inputs.password }}
          fi
          echo "$username" >> USERNAME
          echo "$token" >> PASSWORD
          echo $token | docker login --username $username --password-stdin $image_url || \
          { echo "::error::Failed to log in" ; exit 1 ;}
        id: docker_login
        shell: 'bash'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Malevich
        run: |
          pip install malevich-space>=0.2.3 || { echo "::error::Failed to install malevich" ; exit 1 ;}
        shell: 'bash'
      - name: Get branch name
        shell: bash
        run: echo "branch=$(git branch --show-current)" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Build and Push
        run: |
          dirs=${{ inputs.directories }}
          errors=()
          commit_sha=$(git rev-parse HEAD)
          if [[ ${dirs[0]} == "" ]];
          then
           echo "No changed directories, exiting..."
           exit 0
          fi
          if [[ ${{ inputs.registry }} == 'ecr-private' ]];
          then
            image_url=${{ inputs.registry_id }}.dkr.ecr.${{ inputs.region }}.amazonaws.com
          else
            image_url=${{ inputs.registry_url }}/${{ inputs.registry_id }}
          fi
          for dir in $dirs
          do
            name=$(basename $dir)
            if [[ -e $dir ]] && [[ $name != .* ]] && [[ -f $name/Dockerfile ]];
            then
              if [[ ${{ inputs.build }} == true ]];
              then
                echo "Building ${name}"
                docker build -q -t $image_url/$name:$commit_sha $dir || { echo "::warning::Failed to build ${name}" ; errors+=("${name}") ; continue ;}
                if [[ ${{ inputs.registry }} == ecr* ]];
                then
                  echo "Finding/Creating AWS repository"
                  if [[ ${{ inputs.registry }} == "ecr" ]];
                  then
                    aws ecr-public describe-repositories --repository-names $name > /dev/null || \
                    aws ecr-public create-repository --repository-name $name > /dev/null 
                  else
                    aws ecr describe-repositories --repository-names $name > /dev/null || \
                    aws ecr create-repository --repository-name $name > /dev/null
                  fi
                fi  
                echo "Pushing ${name}"
                docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name}" ; errors+=("${name}") ; continue ;}
              fi

                echo -n "Testing ${name} "  
                if [[ ${{ inputs.username }} == "$(cat USERNAME)" ]] && [[ ${{ inputs.password }} == "$(cat PASSWORD)" ]];
                then
                  echo "with credentials"
                  space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
                  $commit_sha "$(echo $commit_sha | git log --format=%B -n 1)" done \
                  $image_url/$name:$commit_sha \
                  --image-user=$(cat USERNAME) --image-token=$(cat PASSWORD) \
                  --space-username=${{ inputs.space_username }} --space-password=${{ inputs.space_password }} --space-org=${{ inputs.org_id }} \
                  ${{ inputs.api_url }} || { echo "::warning::Failed to report" ; errors+=("${name}") ;}
                else
                  echo "without credentials"
                  space ci report ./$dir ${{ steps.extract_branch.outputs.branch }} \
                  $commit_sha "$(git log | grep -P "commit [a-z0-9]{40}" -m 1 | cut -d ' ' -f2 | git log --format=%B -n 1)" done \
                  $image_url/$name:$commit_sha \
                  --space-username=${{ inputs.space_username }} --space-password=${{ inputs.space_password }} --space-org=${{ inputs.org_id }} \
                  ${{ inputs.api_url }} || { echo "::warning::Failed to report ${name}" ; errors+=("${name}") ;}
                fi  
              if [[ ${{ inputs.build }} == true ]];
              then
                echo "Tagging ${name} as latest and pushing"
                docker tag $image_url/$name:$commit_sha $image_url/$name:latest
                docker push -q --all-tags $image_url/$name || { echo "::warning::Failed to push ${name} as latest" ; errors+=("${name}") ; continue ;}
              fi
            fi
          done
          if [[ ${#errors[@]} > 0 ]];
          then
            echo "::error::Failed apps: ${errors[@]}"
          fi
        shell: 'bash'
      - run: |
          rm USERNAME
          rm PASSWORD
          docker logout
        shell: 'bash'